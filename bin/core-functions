####################################
#     Litegapps Core functions     #
####################################
print(){
	echo "$1"
	}
	
printlog(){
	print "$1"
	if [ "$1" != " " ]; then
	echo "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	echo "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	else
	print "$1" >> $log
	echo "$1" >> $loglive
	fi
	}
sedlog(){
	echo "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	echo "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	}
	
	
#
while_log(){
	echo "$1" | tee -a $log
	}
listlog(){
	echo " " >> $log
	echo "---------- Folder List : $1 ----------" >> $log
	echo " " >> $loglive
	echo "---------- Folder List : $1 ----------" >> $loglive
	find "$1" -type f | while read lol; do
	while_log "| $(du -sah $lol | cut -f 1) | $lol"
	done >> $loglive
	echo "--------------------------------------" >> $log
	echo " " >> $log
	echo "--------------------------------------" >> $loglive
	echo " " >> $loglive
	}

getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }

loadings() {
  PID=$!
  a=0;
  while [ -d /proc/$PID ]; do
    b=$((+1))
    a=$((a+1))
    sleep 0.9s
    printf "\r${@} [${a}Second]"
  done
}

loadingm() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((h+1))
    sleep 59.9s
    printf "\r${@} [${b}Minutes]"
  done
}

loadingz() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((a+1))
    sleep 0.9s
    printf "#"
  done
}

printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}



setime(){
	if [[ $1 == '-f' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -f "$2" ]; then
	      touch -ct $3 "$2" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	   else
	      echo "setime: $2: Is not file"
	   fi
	elif [[ $1 == '-r' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -d "$2" ]; then
	      find "$2" -print | while read filename; do
	      touch -ct $3 "$filename" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	      done
	   else
	      echo "setime: $2: Is not directory"
	   fi
	elif [[ $1 == '--version' ]] || [[ $1 == '-v' ]]; then
	echo "setime v1.0 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    elif [[ $1 == '--help' ]] || [[ $1 == '-h' ]]; then
    echo "usage : setime <options> <input> <datetime>"
    echo " "
    echo "example : setime -r /sdcard/download 202004081503"
    echo " "
    echo "options"
    echo "-f                    file"
    echo "-r                    change all directory and file"
    echo "-v, --version         version"
    echo "-h, --help            help"
    echo " "
    echo "setime v1.0 since 2020-04-09 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    else
    echo "usage : setime --help"
    fi
}

#############################
#     Color
#############################

bash_color(){
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo "${G}example${N}"
loadBar=' '			# Load UI
# Remove color codes if -nc or in ADB Shell
[ -n "$1" -a "$1" == "-nc" ] && shift && NC=true
[ "$NC" -o -n "$LOGNAME" ] && {
	G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}
}

del(){ rm -rf "$@"; }
cdir(){ mkdir -p "$@"; }

ch_con(){
chcon -h u:object_r:system_file:s0 "$1" || sedlog "Failed chcon $1"
}

	
abort(){
	print " " | tee -a $log | tee -a $loglive
	print " !!! $1" | tee -a $log | tee -a $loglive
	print " " | tee -a $log | tee -a $loglive
	[ -d $tmp ] && del $tmp
	exit 1
	}
get_config() {
	getp "$1" "$base/config"
}

ERROR(){
	printlog "[ERROR] <$1>"
	[ -d $tmp ] && del $tmp
	exit 1
	}
BIN_TEST(){
	local INPUT=$1
	if [ "$(command -v $INPUT)" ]; then
		print "$(command -v $INPUT)"
	elif [ -f $bin/$INPUT ]; then
		print "$bin/$INPUT"
	else
		abort "Executable binary nor found <$INPUT>"
	fi
	}
lgapps_unzip(){
	printlog "- Unzip"
	local UNZIP=`BIN_TEST unzip`
	printlog "- Using executable <$UNZIP>"
	find $tmp -name *app -type d | while read DIRAPP; do
	for WAHYU1 in $(ls -1 $DIRAPP); do
		if [ -d $DIRAPP/$WAHYU1 ]; then
			if [ -f $DIRAPP/${WAHYU1}/${WAHYU1}.apk ]; then
				sedlog "Unzipping <<$DIRAPP/${WAHYU1}/${WAHYU1}.apk>>"
				sedlog "To <<$DIRAPP/${WAHYU1}/${WAHYU1}>>"
				test ! -d $DIRAPP/${WAHYU1}/${WAHYU1} && cdir $DIRAPP/${WAHYU1}/${WAHYU1}
				$UNZIP -o $DIRAPP/${WAHYU1}/${WAHYU1}.apk -d $DIRAPP/${WAHYU1}/${WAHYU1} >/dev/null
				if [ -f $DIRAPP/${WAHYU1}/${WAHYU1}.apk ]; then
					sedlog "- Deleting $DIRAPP/${WAHYU1}/${WAHYU1}.apk"
					del $DIRAPP/${WAHYU1}/${WAHYU1}.apk
				fi
				
			fi
		fi
	done
	done
	}

make_tar(){
	print "- Make tar apk"
	local TAR=`BIN_TEST tar`
	printlog "- Using executable <$TAR>"
	find $tmp -type d | while read folname; do
	local DIR_INPUT=`basename $folname`
	local G7
	for G7 in system product system_ext vendor; do
		if [ $DIR_INPUT = $G7 ]; then
			for i1 in $(ls -1 $folname); do
				if [ -d $folname/$i1 ]; then
					for i2 in $(ls -1 $folname/$i1); do
						cd $folname/$i1
						sedlog "- Creating .tar $folname/$i1/$i2"
						$TAR -cf $i2.tar $i2
						del $i2
						cd /
        			done
        		fi
        	done
    	fi
	done
	done
}
make_tar_arch(){
	printlog "- Make files.tar"
	cd $tmp
	local TAR=`BIN_TEST tar`
	printlog "- Using executable <$TAR>"
	$TAR -cf "files.tar" *
	cd /
	for RM_LIST_TMP in $(ls -1 $tmp); do
		if [ -d $tmp/$RM_LIST_TMP ]; then
    		sedlog "- Removing $tmp/$RM_LIST_TMP"
    		del $tmp/$RM_LIST_TMP
    	fi
	done
}
make_archive(){
	compression=$(get_config compression)
	lvlcom=$(get_config compression.level)
	printlog "- Building archive : $compression"
	printlog "- Level Compression : $lvlcom"
	cd $tmp
	for archi in $(ls -1 $tmp); do
		case $compression in
		xz)
		if [ "$lvlcom" -lt 10 ]; then
       	local XZ=`BIN_TEST xz`
       	printlog "- Using executable <$XZ>"
       	$XZ -${lvlcom}e $tmp/$archi
       	del $archi
        else
        	abort "xz level 1-9"
        fi
        ;;
      br | brotli)
        if [ $lvlcom -lt 10 ]; then
        	local BROTLI=`BIN_TEST brotli`
        	printlog "- Using executable <$BROTLI>"
        	$BROTLI -${lvlcom}j $archi
        	del $archi
       else
       	 abort "brotli level 1-9"
       fi
       ;;
     *)
       ERROR "Format $compression Not support"
       ;;
     esac
done

}
set_time_stamp(){
	local input=$1
	if [ $PROP_SET_TIME = true ] && [ $PROP_SET_DATE -eq $PROP_SET_DATE ]; then
		setime -r $input $PROP_SET_DATE
	fi
}
make_zip(){
	local INPUT="$1"
	local OUTPUT="$2"
	local ZIP_LEVEL=`get_config zip.level`
	case $ZIP_LEVEL in
	0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ZIP_LEVEL=$ZIP_LEVEL ;;
	*) ZIP_LEVEL=1 ;;
	esac
	#checking binary
	if [ $(command -v zip) ]; then
		local ZIP=`command -v zip`
	elif [ -f $bin/zip ]; then
		local ZIP=$bin/zip
	else
		ERROR "Zip executable not found"
	fi
	cd $INPUT
	test ! -d $(dirname $OUTPUT) && cdir $(dirname $OUTPUT)
	test -f $OUTPUT && del $OUTPUT
	#
	printlog "- Build Zip"
	$ZIP -r${ZIP_LEVEL} $OUTPUT . >/dev/null
	
	if [ $(get_config zip.signer) = "true" ]; then
		#cheking java
		if [ "$(command -v java)" ];then
			printlog "- Zip signer"
			printlog "- Using java <$(command -v java)>"
			java -jar $base/bin/zipsigner.jar $OUTPUT ${OUTPUT}_signed
			if [ $? -eq 0 ]; then
				del $OUTPUT
				mv ${OUTPUT}_signed $OUTPUT
			else
				ERROR "Zip signer <$OUTPUT>"
			fi
		else
			ERROR "Java not installed"
		fi
	
	fi
	printlog " "
	printlog " Exec   : $ZIP"
	printlog " Name   : $(basename $OUTPUT)"
	printlog " Level  : $ZIP_LEVEL"
	printlog " Size   : $(du -sh $OUTPUT | cut -f1)"
	printlog " Output : $OUTPUT"
	printlog "- Done "
	printlog " "
	}
copy_binary_flashable(){
	local INPUT_ARCH=$1
	local CP_OUT=$2
	case $(get_config compression) in
     xz)
       local flashable_bin=xz
     ;;
      br | brotli)
       local flashable_bin=brotli
     ;;
     
     *) local flashable_bin=brotli
     ;;
     esac
	local input_arch=$1
	for W94 in tar zip $flashable_bin; do
		if [ -f $base/bin/$INPUT_ARCH/$W94 ]; then
			cdir $CP_OUT
			cp -pf $base/bin/$INPUT_ARCH/$W94 $CP_OUT/
		else
			ERROR "Binary <$base/bin/$INPUT_ARCH/$W94> not found"
		fi
	done
}
get_android_version(){
	local input=$1
	case $input in
		21) echo 5.0 ;;
		22) echo 5.1 ;;
		23) echo 6.0 ;;
		24) echo 7.0 ;;
		25) echo 7.1 ;;
		26) echo 8.0 ;;
		27) echo 8.1 ;;
		28) echo 9.0 ;;
		29) echo 10.0 ;;
		30) echo 11.0 ;;
		31) echo 12.0 ;;
		32) echo 12.1 ;;
		33) echo 13.0 ;;
	 esac
	}
	
SED(){
	local INPUT=$1
	local OUTPUT=$2
	local FILE=$3
	sed -i 's/'"${INPUT}"'/'"${OUTPUT}"'/g' $FILE
	}
	